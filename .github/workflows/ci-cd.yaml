name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: write
  packages: write

env:
  CHART_DIR: helm/${{ github.event.repository.name }}
  OCI_REGISTRY: ghcr.io
  OCI_NAMESPACE: ${{ github.repository_owner }}/charts
  CHART_NAME: ${{ github.event.repository.name }}
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}

jobs:
  version:
    name: Version Processing
    runs-on: ubuntu-latest
    # Only run version processing on main branch
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      version: ${{ steps.version.outputs.next }}
      changed: ${{ steps.version.outputs.changed }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Calculate next version
        uses: charlesthomas/github-action-svu@v1.1.3+3.2.3
        id: version
        with:
          pushTag: true
          verbose: true
          cmd: next

  lint-go:
    name: Lint Go
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest

  lint-helm:
    name: Lint Helm
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Lint Helm chart
        run: helm lint ${{ env.CHART_DIR }}

      - name: Template Helm chart
        run: helm template bookmark-generator ${{ env.CHART_DIR }}

  test:
    name: Test Go
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.out
        continue-on-error: true

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint-go, lint-helm, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Build binary
        run: go build -v -o bookmark-generator ./cmd/bookmark-generator

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: bookmark-generator:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release-docker:
    name: Release Docker Image
    runs-on: ubuntu-latest
    needs: [version, build]
    if: needs.version.outputs.changed == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ needs.version.outputs.version }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release-helm:
    name: Release Helm Chart
    runs-on: ubuntu-latest
    needs: [version, release-docker]
    if: needs.version.outputs.changed == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4

      - name: Install yq
        uses: mikefarah/yq@v4

      - name: Helm dependencies
        working-directory: ${{ env.CHART_DIR }}
        run: |
          if [ -f Chart.yaml ] && yq '.dependencies' Chart.yaml >/dev/null 2>&1; then
            helm dependency build
          fi

      - name: Align Chart.yaml version
        run: |
          VER="${{ needs.version.outputs.version }}"
          yq -i ".version = \"${VER}\"" "${{ env.CHART_DIR }}/Chart.yaml"
          yq -i ".appVersion = \"${VER}\"" "${{ env.CHART_DIR }}/Chart.yaml"
          echo "Chart.yaml set to version ${VER}"

      - name: Package chart
        run: |
          VER="${{ needs.version.outputs.version }}"
          helm package "${{ env.CHART_DIR }}" --version "${VER}"
          ls -l "${{ env.CHART_NAME }}-${VER}.tgz"

      - name: Login to OCI registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login "${{ env.OCI_REGISTRY }}" \
            --username "${{ github.actor }}" --password-stdin

      - name: Push chart to OCI
        run: |
          VER="${{ needs.version.outputs.version }}"
          helm push "${{ env.CHART_NAME }}-${VER}.tgz" "oci://${{ env.OCI_REGISTRY }}/${{ env.OCI_NAMESPACE }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.version.outputs.version }}
          name: ${{ env.CHART_NAME }} ${{ needs.version.outputs.version }}
          body: |
            Release `${{ needs.version.outputs.version }}` of `${{ env.CHART_NAME }}`.
            
            **Docker Image:**
            - `${{ env.IMAGE_NAME }}:${{ needs.version.outputs.version }}`
            - `${{ env.IMAGE_NAME }}:latest`
            
            **Helm Chart:**
            - `oci://${{ env.OCI_REGISTRY }}/${{ env.OCI_NAMESPACE }}/${{ env.CHART_NAME }}:${{ needs.version.outputs.version }}`
          files: |
            ${{ env.CHART_NAME }}-${{ needs.version.outputs.version }}.tgz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
